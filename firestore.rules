/**
 * @fileoverview Firestore Security Rules for TKN Fi RE application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access and modify their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}/userProfile`.
 * - Deals are stored under `/users/{userId}/deals/{dealId}`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only create, read, update, and delete their own deals.
 * - The rules do not currently enforce plan limits on the number of deals. This would require additional complexity and is deferred for later implementation.
 *
 * Denormalization for Authorization:
 * - The `userId` is included in the path for both user profiles and deals, which simplifies authorization checks and avoids the need for `get()` calls.
 *
 * Structural Segregation:
 * - User-specific data is stored under the `/users/{userId}` path, ensuring that data is isolated and accessible only to the owning user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile documents. Only the owner can read and write their own profile.
     * @path /users/{userId}/userProfile
     * @allow (get) User with UID 'user123' can read their own profile at /users/user123/userProfile.
     * @allow (list) User with UID 'user123' can list their own profile at /users/user123/userProfile (though there should only be one).
     * @allow (create) User with UID 'user123' can create their own profile at /users/user123/userProfile if the document.id matches the userId.
     * @allow (update) User with UID 'user123' can update their own profile at /users/user123/userProfile.
     * @allow (delete) User with UID 'user123' can delete their own profile at /users/user123/userProfile.
     * @deny (get) User with UID 'user456' cannot read user123's profile at /users/user123/userProfile.
     * @deny (create) User with UID 'user456' cannot create a profile for user123 at /users/user123/userProfile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfile {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.id == userId;
      allow update: if isOwner(userId) && resource != null && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures deal documents. Only the owner can create, read, update, and delete their own deals.
     * @path /users/{userId}/deals/{dealId}
     * @allow (get) User with UID 'user123' can read their own deal at /users/user123/deals/deal456.
     * @allow (list) User with UID 'user123' can list their own deals at /users/user123/deals.
     * @allow (create) User with UID 'user123' can create a deal at /users/user123/deals/deal456.
     * @allow (update) User with UID 'user123' can update their own deal at /users/user123/deals/deal456.
     * @allow (delete) User with UID 'user123' can delete their own deal at /users/user123/deals/deal456.
     * @deny (get) User with UID 'user456' cannot read user123's deal at /users/user123/deals/deal456.
     * @deny (create) User with UID 'user456' cannot create a deal for user123 at /users/user123/deals/deal456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/deals/{dealId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param userId The user ID to check against.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}