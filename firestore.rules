/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for all data stored in Firestore.
 * All data is nested under /users/{userId}, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}/userProfile: Stores the UserProfile document for each user.
 * - /users/{userId}/deals/{dealId}: Stores Deal documents associated with each user.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user profiles and deals.
 * - List operations are restricted to the owner of the data.
 * - The rules do NOT enforce data validation beyond ensuring relational integrity (e.g., userId consistency).
 * - Plan limits (Free = 5 deals, Pro = 10, Executive = unlimited) are not enforced in these security rules,
 *   as it would require additional reads to fetch the plan status, violating Authorization Independence.
 *   This should be handled in backend code.
 *
 * Denormalization for Authorization:
 * - The `userId` is present in both the path and the Deal document, allowing for efficient ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for UserProfile documents.
     * @path /users/{userId}/userProfile
     * @allow (create) User with ID 'user123' creates their own profile.
     * @allow (get) User with ID 'user123' reads their own profile.
     * @allow (update) User with ID 'user123' updates their own profile.
     * @allow (delete) User with ID 'user123' deletes their own profile.
     * @deny (create) User with ID 'user123' attempts to create a profile for 'user456'.
     * @deny (get) User with ID 'user123' attempts to read the profile of 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfile {
      // Verifies that the user is signed in.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for Deal documents.
     * @path /users/{userId}/deals/{dealId}
     * @allow (create) User with ID 'user123' creates a deal under their user ID.
     * @allow (get) User with ID 'user123' reads a deal under their user ID.
     * @allow (update) User with ID 'user123' updates a deal under their user ID.
     * @allow (delete) User with ID 'user123' deletes a deal under their user ID.
     * @deny (create) User with ID 'user123' attempts to create a deal for 'user456'.
     * @deny (get) User with ID 'user123' attempts to read a deal belonging to 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/deals/{dealId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId && request.resource.data.id == dealId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // --- Helper functions ---
    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user ID matches the authenticated user's ID.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the user ID matches the authenticated user's ID and the resource exists.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}