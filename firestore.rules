/**
 * @file Firebase Security Rules for TKN Fi RE application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has a dedicated data tree rooted at `/users/{userId}`.
 * Only the authenticated user can read or write their own profile data and deals.
 *
 * Data Structure:
 * All user-specific data is nested under `/users/{userId}`.
 * - User profiles are stored at `/users/{userId}/userProfile`.
 * - Deals are stored at `/users/{userId}/deals/{dealId}`.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied. Only the owner can access their own user data.
 * - Rules are designed for Authorization Independence, avoiding the need for costly `get()` calls.
 * - Data consistency between the path and the document's internal `userId` field is enforced.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}/userProfile
     * @allow (get, create, update, delete) if the user's UID matches the userId in the path.
     * @deny (get, create, update, delete) if the user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfile {
      // Allow reads (get, list) if the user is the owner.
      allow get: if isOwner(userId);
      allow list: if false;

      // Allow creation if the user is the owner. Also validate that the userId field matches the path.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow updates if the user is the owner and the userId field is immutable.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow deletion if the user is the owner.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to deal data for a specific user.
     * @path /users/{userId}/deals/{dealId}
     * @allow (get, create, update, delete) if the user's UID matches the userId in the path.
     * @deny (get, create, update, delete) if the user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/deals/{dealId} {
      // Allow reads (get) if the user is the owner.
      allow get: if isOwner(userId);

      // Allow listing deals if the user is the owner.
      allow list: if isOwner(userId);

      // Allow creation if the user is the owner and the userId matches.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow updates if the user is the owner and the userId field is immutable.
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow deletion if the user is the owner.
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper Functions ---

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user is the owner of the resource based on the userId in the path.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Checks if the user is the owner of an existing resource based on the userId in the path.
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}