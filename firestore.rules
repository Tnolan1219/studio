/**
 * @fileoverview Firestore Security Rules for TKN Fi RE application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has a dedicated
 * data tree under `/users/{userId}` where their profile and deals are stored.
 * Only the authenticated user can read or write data within their own tree.
 *
 * Data Structure:
 * All data is nested under /users/{userId}:
 * - /users/{userId}: Optional root-level user document
 * - /users/{userId}/userProfile: Stores the user's profile information.
 * - /users/{userId}/deals/{dealId}: Stores real estate deals associated with the user.
 *
 * Key Security Decisions:
 * - Users can only access their own data. No cross-user data access is allowed.
 * - Listing other user's documents is disallowed to prevent data leakage.
 * - The `id` field within both `UserProfile` and `Deal` documents must match the
 *   document ID in the path to prevent unauthorized data creation or modification.
 *
 * Denormalization for Authorization:
 * The `userId` field in the `Deal` document is used to enforce ownership and
 * must match the `userId` in the document path. This denormalization avoids
 * the need for costly `get()` calls to a separate user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the root-level user document (if used).
     * @path /users/{userId}
     * @allow (get, create, update, delete) - Only the authenticated user can access their own root document.
     * @deny (get, create, update, delete) - User 'user456' attempts to access document at /users/user123.
     * @principle Enforces document ownership, ensuring only the user can manage their data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      allow get, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Secures the user profile data. Only the authenticated user can read or write their profile.
     * @path /users/{userId}/userProfile
     * @allow (create, update) - User with UID 'user123' creates/updates their profile at /users/user123/userProfile with matching id.
     * @allow (get) - User with UID 'user123' reads their profile at /users/user123/userProfile.
     * @deny (create, update) - User with UID 'user456' attempts to create/update profile at /users/user123/userProfile.
     * @deny (delete) - No one can delete the profile document.
     * @principle Enforces document ownership, ensuring only the user can manage their profile.
     */
    match /users/{userId}/userProfile {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if false;
    }

    /**
     * @description Secures real estate deal data. Only the authenticated user can manage their deals.
     * @path /users/{userId}/deals/{dealId}
     * @allow (create, update, delete) - User 'user123' creates/updates/deletes deal 'deal456' under /users/user123/deals/deal456.
     * @allow (get, list) - User 'user123' reads/lists deals under /users/user123/deals/.
     * @deny (create, update, delete) - User 'user456' attempts to create/update/delete deal 'deal456' under /users/user123/deals/deal456.
     * @principle Enforces document ownership, ensuring only the user can manage their deals.
     */
    match /users/{userId}/deals/{dealId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId)
        && request.resource.data.userId == userId
        && request.resource.data.id == dealId;
      allow update: if isExistingOwner(userId)
        && request.resource.data.userId == resource.data.userId
        && request.resource.data.id == dealId;
      allow delete: if isExistingOwner(userId);
    }
  }
}