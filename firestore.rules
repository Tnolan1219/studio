/**
 * @file Firebase Security Rules for TKN Fi RE application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has sole access to their profile data and associated deals.
 *
 * Data Structure:
 * All data is nested under /users/{userId}. User profiles are stored at /users/{userId}/userProfile.
 * Deals are stored under /users/{userId}/deals/{dealId}.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Data validation is relaxed during this prototyping phase, focusing only on ownership and relational integrity.
 * - Plan limits (Free = 5 deals, Pro = 10, Executive = unlimited) are not enforced in this prototype. This is a future consideration.
 *
 * Denormalization for Authorization:
 * The `userId` field in the `/deals/{dealId}` document is used to ensure that only the owner can modify or delete the deal.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data.
     * @path /users/{userId}/userProfile
     * @allow (create) User with ID 'user123' creates their profile.
     *    - Auth: {uid: 'user123'}
     *    - Request data: {id: 'user123', name: 'John Doe', email: 'john@example.com', country: 'USA', state: 'CA', planStatus: 'Free'}
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their profile.
     *    - Auth: {uid: 'user123'}
     * @deny (create) User with ID 'user456' tries to create a profile for 'user123'.
     *    - Auth: {uid: 'user456'}
     *    - Request data: {id: 'user123', name: 'John Doe', email: 'john@example.com', country: 'USA', state: 'CA', planStatus: 'Free'}
     * @deny (get, update, delete) User with ID 'user456' tries to read/update/delete the profile of 'user123'.
     *    - Auth: {uid: 'user456'}
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfile {
      // Allows only the authenticated user to create their own profile.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      // Allows the authenticated user to get their profile.
      allow get: if isSignedIn() && isOwner(userId);
      // Allows the authenticated user to update their own profile, ensuring the ID remains the same.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      // Allows the authenticated user to delete their own profile.
      allow delete: if isSignedIn() && isExistingOwner(userId);
      // Disallows listing of user profiles.
      allow list: if false;
    }

    /**
     * @description Secures deals associated with each user.
     * @path /users/{userId}/deals/{dealId}
     * @allow (create) User 'user123' creates a deal.
     *    - Auth: {uid: 'user123'}
     *    - Request data: {id: 'dealXYZ', userId: 'user123', dealName: 'My First Deal', propertyType: 'Rental', purchasePrice: 100000, monthlyCashFlow: 500, cocReturn: 0.1, roi: 0.05}
     * @allow (get, update, delete) User 'user123' reads/updates/deletes their deal 'dealXYZ'.
     *    - Auth: {uid: 'user123'}
     * @deny (create) User 'user456' tries to create a deal for 'user123'.
     *    - Auth: {uid: 'user456'}
     *    - Request data: {id: 'dealXYZ', userId: 'user123', dealName: 'My First Deal', propertyType: 'Rental', purchasePrice: 100000, monthlyCashFlow: 500, cocReturn: 0.1, roi: 0.05}
     * @deny (get, update, delete) User 'user456' tries to read/update/delete the deal 'dealXYZ' of 'user123'.
     *    - Auth: {uid: 'user456'}
     * @principle Enforces document ownership for all operations. Validates that userId within the document matches the path.
     */
    match /users/{userId}/deals/{dealId} {
      // Allows only the authenticated user to create deals under their user ID, ensuring userId is consistent.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      // Allows the authenticated user to get their own deals.
      allow get: if isSignedIn() && isOwner(userId);
      // Allows the authenticated user to update their own deals, ensuring userId remains the same.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      // Allows the authenticated user to delete their own deals.
      allow delete: if isSignedIn() && isExistingOwner(userId);
      // Allows the authenticated user to list their own deals.
      allow list: if isSignedIn() && isOwner(userId);
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the existing owner of the resource and the resource exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}