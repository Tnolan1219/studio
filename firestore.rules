/**
 * @fileoverview Firestore Security Rules for TKN Fi RE application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own profile data and the deals associated with their profile.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.  The {userId} segment must match the authenticated user's UID.
 * - /users/{userId}/deals/{dealId}: Stores financial deal data.  The {userId} segment must match the authenticated user's UID.
 *
 * Key Security Decisions:
 * - No user listing: Listing all user profiles is disallowed for privacy reasons.
 * - Path-based ownership: Ownership is derived from the Firestore path, eliminating the need for `get()` calls in rules.
 * - Relational integrity on create: The `userId` field within a 'Deal' document must match the `userId` path segment when the document is created.
 * - Immutability of `userId` on update: The `userId` field within a 'Deal' document cannot be changed after creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create their own profile document if the document ID matches their UID.
     * @allow (get, update, delete) - Authenticated user with UID 'user_abc' can read, update, and delete their own profile document if the path's {userId} matches their UID.
     * @deny (create) - Authenticated user with UID 'user_abc' cannot create a profile document for another user (e.g., /users/user_xyz).
     * @deny (get, update, delete) - Authenticated user with UID 'user_abc' cannot read, update, or delete another user's profile document (e.g., /users/user_xyz).
     * @deny (list) - Listing all user documents is forbidden.
     * @principle Enforces document ownership. Users can only manage their own profile.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to deal documents nested under a user profile.
     * @path /users/{userId}/deals/{dealId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create a deal document under their profile if the deal's `userId` field matches their UID.
     * @allow (get, update, delete) - Authenticated user with UID 'user_abc' can read, update, and delete deal documents under their profile if the path's {userId} matches their UID.
     * @deny (create) - Authenticated user with UID 'user_abc' cannot create a deal document under another user's profile (e.g., /users/user_xyz).
     * @deny (get, update, delete) - Authenticated user with UID 'user_abc' cannot read, update, or delete deal documents under another user's profile (e.g., /users/user_xyz).
     * @principle Enforces document ownership and validates relational integrity between the deal and the user profile.
     */
    match /users/{userId}/deals/{dealId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId);
    }
  }
}