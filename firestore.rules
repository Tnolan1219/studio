/**
 * @fileoverview Firestore Security Rules for TKN Fi RE application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access and modify their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}/userProfile`.
 * - Deals are stored under `/users/{userId}/deals/{dealId}`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles.
 * - Users can only read, create, update, and delete their own deals.
 * - Listing of deals is restricted to the owning user.
 * - The ruleset does not currently enforce plan limits on the number of deals.
 *
 * Denormalization for Authorization:
 * - The `userId` is present in both the path and the `Deal` document to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}/userProfile
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth UID.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth UID.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Authenticated user cannot create a profile for another user.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfile {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing user profiles is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId; // Enforce immutability of userId
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to deal documents.
     * @path /users/{userId}/deals/{dealId}
     * @allow (get) Authenticated user can read their own deal.
     * @allow (list) Authenticated user can list their own deals.
     * @allow (create) Authenticated user can create a deal under their user ID if the userId matches their auth UID.
     * @allow (update) Authenticated user can update their own deal if the userId matches their auth UID.
     * @allow (delete) Authenticated user can delete their own deal if the userId matches their auth UID.
     * @deny (get) Authenticated user cannot read another user's deal.
     * @deny (list) Authenticated user cannot list another user's deals.
     * @deny (create) Authenticated user cannot create a deal under another user's ID.
     * @deny (update) Authenticated user cannot update another user's deal.
     * @deny (delete) Authenticated user cannot delete another user's deal.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/deals/{dealId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }
  }
}