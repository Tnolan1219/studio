/**
 * @fileoverview Firestore Security Rules for TKN Fi RE application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated data (deals and comments).
 * Users can only access their own profile data and the deals they have created.
 * Comments are also user-owned within the context of a specific deal.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/deals/{dealId}: Saved real estate deals for each user.
 * - /users/{userId}/deals/{dealId}/comments/{commentId}: Comments on specific deals.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations are strictly validated against user ownership.
 *
 * Denormalization for Authorization:
 * - Deals have a `userId` field to easily check ownership.
 * - Comments have an `author` field to easily check ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get, create, update, delete) User with UID "CAG6gKiNjJYKOMfNHCpVSbgLf4q1" can access their own profile.
     * @deny (get, create, update, delete) User with UID "DIFFERENT_UID" cannot access profile of "CAG6gKiNjJYKOMfNHCpVSbgLf4q1".
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the request is from the owner of the user profile.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secure deals subcollection. Only the owner of the user profile can read or write deals.
     * @path /databases/{database}/documents/users/{userId}/deals/{dealId}
     * @allow (get, create, update, delete) User with UID "CAG6gKiNjJYKOMfNHCpVSbgLf4q1" can access their own deal.
     * @deny (get, create, update, delete) User with UID "DIFFERENT_UID" cannot access deal of "CAG6gKiNjJYKOMfNHCpVSbgLf4q1".
     * @principle Enforces document ownership for all operations on deals.
     */
    match /users/{userId}/deals/{dealId} {
      // Helper function to check if the request is from the owner of the deal
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      //Helper function to validate ownership on an existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

      /**
       * @description Secure comments subcollection within deals. Only the owner of the user profile can read or write comments.
       * @path /databases/{database}/documents/users/{userId}/deals/{dealId}/comments/{commentId}
       * @allow (get, create, update, delete) User with UID "CAG6gKiNjJYKOMfNHCpVSbgLf4q1" can access their own deal comment.
       * @deny (get, create, update, delete) User with UID "DIFFERENT_UID" cannot access deal comment of "CAG6gKiNjJYKOMfNHCpVSbgLf4q1".
       * @principle Enforces document ownership for all operations on deal comments.
       */
    match /users/{userId}/deals/{dealId}/comments/{commentId} {
        // Helper function to check if the request is from the owner of the comment
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        //Helper function to validate ownership on an existing document
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }
  }
}