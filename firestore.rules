/**
 * @fileOverview Firestore Security Rules for TKN Fi RE application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user has a dedicated data tree under `/users/{userId}`.
 * Only the authenticated user can read and write their own profile data and associated deals.
 *
 * Data Structure:
 * User profiles are stored at `/users/{userId}/userProfile`.
 * Deals are stored at `/users/{userId}/deals/{dealId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own data. No cross-user data access is permitted.
 * - Listing of all users or deals is disallowed. List operations are only allowed within a user's own data tree.
 *
 * Denormalization for Authorization:
 * The `userId` is included in each deal document to simplify ownership checks, even though it's also present in the path. This avoids any need for `get()` calls to the parent document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}/userProfile
     * @allow (create, update, get, list) if the request is made by the owner of the profile.
     * @deny (create, update, get, list) if the request is made by a different user.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/userProfile {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to deal data associated with a user.
     * @path /users/{userId}/deals/{dealId}
     * @allow (create, update, get, list) if the request is made by the owner of the deal.
     * @deny (create, update, get, list) if the request is made by a different user.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/deals/{dealId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // On a create, ensure that the userId field in the data matches the {userId} from the path.
      // On an update, ensure that the userId field is immutable.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}