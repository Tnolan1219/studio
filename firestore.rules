/**
 * @file Firestore Security Rules for TKN Fi RE application.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model, ensuring that users can only access and modify data associated with their own user ID.
 *
 * @data_structure All data is nested under the `/users/{userId}` path, with user profiles stored in `/users/{userId}/userProfile` and deals stored in `/users/{userId}/deals/{dealId}`. This hierarchical structure facilitates path-based authorization.
 *
 * @key_security_decisions
 *   - User listing is implicitly disallowed by the structure.
 *   - The rules explicitly deny any unauthorized access to user data, including attempts to modify other users' profiles or deals.
 *   - The rules are designed to be authorization independent, avoiding the need for costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}/userProfile
     * @allow (get, create, update, delete) - Authenticated user with matching userId.
     * @deny (get, create, update, delete) - Any other user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfile {
      // Allow reads to the user's own profile.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      // Allow creation of the user's own profile, validating the userId.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allow updates to the user's own profile. Enforce immutability of the userId.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow deletion of the user's own profile.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for deals. Only the authenticated user can read, create, update, and delete their own deals.
     * @path /users/{userId}/deals/{dealId}
     * @allow (get, create, update, delete) - Authenticated user with matching userId.
     * @deny (get, create, update, delete) - Any other user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/deals/{dealId} {
      // Allow reads to the user's own deals.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Allow creation of a deal for the user, validating the userId.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow updates to the user's own deals. Enforce immutability of the userId.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow deletion of the user's own deals.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper function to determine if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to determine if the request is made by the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to determine if the request is made by the existing owner of the document.
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}