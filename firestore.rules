/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for data access.
 * All data is nested under /users/{userId}, ensuring that users can only
 * access their own profiles and associated deals.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/deals/{dealId}: Stores deals associated with a specific user.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own profile.
 * - Users can only create, read, update, and delete deals associated with their profile.
 * - Listing of user profiles is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - The `userId` field in the Deal entity is used to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get,update,delete) User with UID 'user123' can read, update, and delete their own profile.
     * @deny (create,update,delete) User with UID 'user456' cannot create, update, or delete profile 'user123'.
     * @deny (list) No one can list user profiles.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Only allow creation if the user is signed in and the userId matches the authenticated user's ID
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to deal documents under a user profile.
     * @path /users/{userId}/deals/{dealId}
     * @allow (create) User with UID 'user123' can create a deal under their profile.
     * @allow (get,update,delete) User with UID 'user123' can read, update, and delete a deal under their profile.
     * @deny (create,update,delete) User with UID 'user456' cannot create, update, or delete deals under profile 'user123'.
     * @deny (create) User with UID 'user123' cannot create a deal if the userId in the deal data does not match 'user123'.
     * @principle Enforces document ownership for writes, validates user ID consistency.
     */
    match /users/{userId}/deals/{dealId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }
  }

  // Helper functions

  /**
   * @description Checks if the user is signed in.
   * @returns {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the authenticated user is the owner of the resource.
   * @param {string} userId - The user ID to compare against the authenticated user's ID.
   * @returns {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    /**
   * @description Checks if the authenticated user is the owner of an existing resource.
   * @param {string} userId - The user ID to compare against the authenticated user's ID.
   * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}