/**
 * @fileoverview Firestore Security Rules for TKN Fi RE application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access and modify their own data.
 *
 * Data Structure:
 * All user-related data is nested under `/users/{userId}`, with user profiles stored at `/users/{userId}/userProfile` and deals stored at `/users/{userId}/deals/{dealId}`.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own profiles and deals.
 * - Listing of user profiles is explicitly disallowed to prevent information leakage.
 *
 * Denormalization for Authorization:
 * The `userId` is included in the `Deal` document, which allows enforcement of ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}/userProfile
     * @allow (create) User with ID 'user123' can create their profile.
     *   Request: auth.uid = 'user123', resource.data.id = 'user123'
     * @allow (get) User with ID 'user123' can read their profile.
     *   Request: auth.uid = 'user123'
     * @allow (update) User with ID 'user123' can update their profile.
     *   Request: auth.uid = 'user123'
     * @allow (delete) User with ID 'user123' can delete their profile.
     *   Request: auth.uid = 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *   Request: auth.uid = 'user456', resource.data.id = 'user123'
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     *   Request: auth.uid = 'user456'
     * @principle Enforces document ownership and validates relational integrity between path and data.
     */
    match /users/{userId}/userProfile {
      // Users can only read their own profile
      allow get: if isSignedIn() && isOwner(userId);

      // Users can create their own profile if the user ID matches
      allow create: if isSignedIn() && isNewOwner(userId) && request.resource.data.id == userId;

      // Users can update their own profile
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;

      // Users can delete their own profile
      allow delete: if isSignedIn() && isExistingOwner(userId);

      // No listing of user profiles allowed
      allow list: if false;
    }

    /**
     * @description Controls access to deal documents under a specific user.
     * @path /users/{userId}/deals/{dealId}
     * @allow (create) User with ID 'user123' can create a deal under their ID.
     *   Request: auth.uid = 'user123', resource.data.userId = 'user123'
     * @allow (get) User with ID 'user123' can read a deal under their ID.
     *   Request: auth.uid = 'user123'
     * @allow (update) User with ID 'user123' can update a deal under their ID.
     *   Request: auth.uid = 'user123'
     * @allow (delete) User with ID 'user123' can delete a deal under their ID.
     *   Request: auth.uid = 'user123'
     * @deny (create) User with ID 'user456' cannot create a deal under 'user123'.
     *   Request: auth.uid = 'user456', resource.data.userId = 'user123'
     * @deny (get) User with ID 'user456' cannot read a deal under 'user123'.
     *   Request: auth.uid = 'user456'
     * @principle Enforces document ownership, validates relational integrity, and allows owner-only data access.
     */
    match /users/{userId}/deals/{dealId} {
      // Users can read their own deals
      allow get: if isSignedIn() && isOwner(userId);

      // Users can create deals under their own user ID
      allow create: if isSignedIn() && isNewOwner(userId) && request.resource.data.userId == userId;

      // Users can update their own deals
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;

      // Users can delete their own deals
      allow delete: if isSignedIn() && isExistingOwner(userId);

      // Users can list their own deals
      allow list: if isSignedIn() && isOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isNewOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource == null;
    }
  }
}