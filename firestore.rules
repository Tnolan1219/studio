/**
 * @fileoverview Firestore Security Rules for TKN Fi RE application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access and modify their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}/userProfile`.
 * - Deals are stored under `/users/{userId}/deals/{dealId}`.
 *
 * Key Security Decisions:
 * - User profiles and deals are strictly owned by the user, based on the path.
 * - Listing of other user's deals is disallowed.
 *
 * Denormalization for Authorization:
 * - The `userId` field on the `Deal` entity is used to enforce ownership, avoiding the need for `get()` calls to a parent `UserProfile` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}/userProfile
     * @allow (get, update) auth != null && request.auth.uid == userId
     * @allow (create) auth != null && request.auth.uid == request.resource.data.id
     * @deny (delete) Always deny profile deletion.
     * @deny (get, update) auth == null || request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfile {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing user profiles is not permitted.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.id;
      allow update: if isSignedIn() && isOwner(userId) && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if false;
    }

    /**
     * @description Enforces access control for deals. Only the authenticated user can create, read, update, and delete their own deals.
     * @path /users/{userId}/deals/{dealId}
     * @allow (create) auth != null && request.auth.uid == userId
     * @allow (get, list, update, delete) auth != null && request.auth.uid == userId
     * @deny (create, get, list, update, delete) auth == null || request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/deals/{dealId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId) && isOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}