/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only
 * access and manipulate data associated with their own accounts. All data is nested
 * under /users/{userId}, providing a clear ownership hierarchy.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/deals/{dealId}: Stores deals associated with a specific user.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own profiles and deals.
 * - Listing of all users is disallowed.
 * - Authorization decisions are based on the authenticated user's UID and document paths.
 * - Uses denormalized `userProfileId` on each Deal to allow for independent authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users/{userId} collection, ensuring users can only manage their own profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document with the ID 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile document.
     * @deny (create) - User with UID 'user456' cannot create a profile document with the ID 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile document of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/deals/{dealId} collection, ensuring users can only manage their own deals.
     * @path /users/{userId}/deals/{dealId}
     * @allow (create) - User with UID 'user123' can create a deal document under their profile.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, and delete deal documents under their profile.
     * @deny (create) - User with UID 'user456' cannot create a deal document under the profile of user 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot read, list, update, or delete deal documents under the profile of user 'user123'.
     * @principle Enforces document ownership for all operations and validates the 'userProfileId' field on create.
     */
    match /users/{userId}/deals/{dealId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }
  }
}