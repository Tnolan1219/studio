/**
 * @fileOverview Firestore Security Rules for TKN Fi RE application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user can only access and modify their own profile data and the deals they have saved.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information. `userId` must match the authenticated user's UID.
 * - `/users/{userId}/deals/{dealId}`: Stores real estate deals saved by the user.  `userId` in the path must match the authenticated user's UID.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Strict ownership is enforced on all write operations.
 * - No role-based access control is implemented in this initial version.
 *
 * Denormalization for Authorization:
 * - Each `Deal` document has a `userId` field. This allows rules to verify ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information, ensuring only the authenticated user can access their profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with UID 'user123' can access /users/user123.
     * @deny (get, create, update, delete) User with UID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      //Helper function to combine ownership check with existence check
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects saved real estate deals, ensuring only the owner can access them.
     * @path /users/{userId}/deals/{dealId}
     * @allow (get, create, update, delete) User 'user123' can access /users/user123/deals/deal001 if they own it.
     * @deny (get, create, update, delete) User 'user456' cannot access /users/user123/deals/deal001 because they are not the owner.
     * @principle Enforces document ownership for all operations on saved deals.
     */
    match /users/{userId}/deals/{dealId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      //Helper function to combine ownership check with existence check
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/deals/$(dealId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}